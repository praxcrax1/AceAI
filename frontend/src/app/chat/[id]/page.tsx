"use client";

import { useState } from "react";
import { Send, ChevronDown, ChevronUp, FileText, X, ArrowLeft } from "lucide-react";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";
import { Input } from "@/components/ui/input";
import { Separator } from "@/components/ui/separator";
import { Avatar } from "@/components/ui/avatar";

// Mock data for a chat session
const mockMessages = [
  {
    role: "ai",
    content: "Based on the annual report, the company achieved a 15% revenue growth in Q3 2025, primarily due to the new product line launch.",
    sources: [
      { page: 12, text: "Revenue growth reached 15% in Q3 2025..." },
      { page: 24, text: "The new product line contributed significantly..." },
      { page: 36, text: "Market analysis shows positive reception..." },
    ],
    timestamp: new Date().toISOString(),
  },
  {
    role: "user",
    content: "What were the main challenges mentioned?",
    timestamp: new Date().toISOString(),
  },
  {
    role: "ai",
    content: "The report highlights three main challenges:\n\n1. Supply chain disruptions\n2. Increasing competition in Asian markets\n3. Regulatory changes in European operations",
    sources: [
      { page: 18, text: "Supply chain disruptions have affected delivery times..." },
      { page: 42, text: "Competitive pressure in Asian markets has increased..." },
    ],
    timestamp: new Date().toISOString(),
  },
];

interface ChatProps {
  params: {
    id: string;
  };
}

export default function ChatPage({ params }: ChatProps) {
  const { id } = params;
  const [messages, setMessages] = useState(mockMessages);
  const [newMessage, setNewMessage] = useState("");
  const [loading, setLoading] = useState(false);

  // Mock data for the document
  const document = {
    id,
    title: "Annual Report 2025",
    pages: 56,
    type: "PDF",
  };

  const handleSendMessage = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!newMessage.trim()) return;
    
    // Add user message
    setMessages([
      ...messages,
      {
        role: "user",
        content: newMessage,
        timestamp: new Date().toISOString(),
      },
    ]);
    
    // Clear input and set loading
    setNewMessage("");
    setLoading(true);
    
    // Mock AI response after delay
    setTimeout(() => {
      setMessages((prev) => [
        ...prev,
        {
          role: "ai",
          content: "This is a simulated response from the AI based on the document content. In a real implementation, this would be generated by querying your RAG system.",
          sources: [
            { page: Math.floor(Math.random() * document.pages) + 1, text: "Sample citation text from the document..." },
          ],
          timestamp: new Date().toISOString(),
        },
      ]);
      setLoading(false);
    }, 1500);
  };

  return (
    <div className="flex flex-col h-[calc(100vh-4rem)]">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b">
        <div className="flex items-center">
          <Button variant="ghost" size="icon" asChild className="mr-2">
            <Link href="/documents">
              <ArrowLeft className="h-5 w-5" />
              <span className="sr-only">Back</span>
            </Link>
          </Button>
          <div>
            <h1 className="font-semibold">Chat with: {document.title}</h1>
            <p className="text-xs text-muted-foreground">
              {document.type} â€¢ {document.pages} pages
            </p>
          </div>
        </div>
        <Button variant="outline" size="sm">
          <FileText className="h-4 w-4 mr-2" />
          View Document
        </Button>
      </div>

      {/* Chat Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-6">
        {messages.map((message, index) => (
          <div
            key={index}
            className={`flex gap-3 ${
              message.role === "user" ? "flex-row-reverse" : ""
            }`}
          >
            <Avatar className="h-8 w-8">
              {message.role === "ai" ? "AI" : "U"}
            </Avatar>
            
            <div
              className={`rounded-lg p-4 max-w-[80%] ${
                message.role === "user"
                  ? "bg-primary text-primary-foreground"
                  : "bg-muted"
              }`}
            >
              <div className="whitespace-pre-wrap">{message.content}</div>
              
              {message.sources && message.sources.length > 0 && (
                <div className="mt-3">
                  <Collapsible className="w-full">
                    <CollapsibleTrigger asChild>
                      <Button variant="ghost" size="sm" className="flex items-center w-full justify-start p-0 h-auto gap-1 text-xs text-muted-foreground hover:text-foreground">
                        <span>Sources:</span>
                        <ChevronDown className="h-3 w-3" />
                      </Button>
                    </CollapsibleTrigger>
                    <CollapsibleContent className="mt-2 space-y-2">
                      {message.sources.map((source, idx) => (
                        <Card
                          key={idx}
                          className="p-2 text-xs flex items-start gap-2"
                        >
                          <div className="min-w-fit font-medium">
                            Page {source.page}:
                          </div>
                          <div>{source.text}</div>
                        </Card>
                      ))}
                    </CollapsibleContent>
                  </Collapsible>
                </div>
              )}
              
              <div className="mt-2 text-xs text-muted-foreground">
                {new Date(message.timestamp).toLocaleTimeString()}
              </div>
            </div>
          </div>
        ))}
        
        {loading && (
          <div className="flex gap-3">
            <Avatar className="h-8 w-8">AI</Avatar>
            <div className="rounded-lg p-4 max-w-[80%] bg-muted">
              <div className="flex space-x-2">
                <div className="h-2 w-2 rounded-full bg-muted-foreground/50 animate-bounce [animation-delay:-0.3s]"></div>
                <div className="h-2 w-2 rounded-full bg-muted-foreground/50 animate-bounce [animation-delay:-0.15s]"></div>
                <div className="h-2 w-2 rounded-full bg-muted-foreground/50 animate-bounce"></div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Input Area */}
      <div className="border-t p-4">
        <form onSubmit={handleSendMessage} className="flex gap-2">
          <Input
            placeholder="Ask a question about the document..."
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            className="flex-1"
            disabled={loading}
          />
          <Button type="submit" size="icon" disabled={!newMessage.trim() || loading}>
            <Send className="h-4 w-4" />
            <span className="sr-only">Send message</span>
          </Button>
        </form>
      </div>
    </div>
  );
}
